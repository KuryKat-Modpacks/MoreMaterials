plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "me.hypherionmc.modutils.modpublisher" version "1.+"
}

jarJar.enable()

apply from: 'gradle/secrets.gradle'

static def isRelease(String type) {
    def validReleaseTypes = ["SNAPSHOT", "ALPHA", "BETA", "RC", "RELEASE"]

    if (validReleaseTypes.contains(type)) {
        return type == "RELEASE"
    } else {
        throw new GradleException("INVALID RELEASE TYPE: ${type}")
    }
}

project.ext.isRelease = isRelease(mod_release_type)
def base_version = "${mod_version_major}.${mod_version_minor}.${mod_version_patch}"
project.ext.mod_version = project.ext.isRelease.toBoolean() ? "${base_version}" : "${base_version}-${mod_release_type}+${mod_build_numbers}"
version = "${minecraft_version}-${project.ext.mod_version}"
archivesBaseName = "${mod_id}-forge"

java {
    withSourcesJar()
    withJavadocJar()
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

javadoc {
    // Suppress annoying warnings when generating JavaDoc files.
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption('html5', true)
}

apply from: 'gradle/docs.gradle'

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    if (Boolean.parseBoolean(use_parchment)) {
        mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    } else {
        mappings channel: 'official', version: "${minecraft_version}"
    }

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.enabledGameTestNamespaces', "${mod_id}"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    mavenLocal()

    flatDir {
        dirs 'libs'
    }

    maven {
        // location of the maven that hosts JEI files since January 2023
        // location of the maven for Vazkii's mods
        name = "Jared's Maven"
        url = "https://maven.blamejared.com"
    }
    maven {
        // Location of the maven that hosts Registrate (+ Flywheel + Create)
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        name = "MrCrayfish (GitHub)"
        url = "https://maven.pkg.github.com/MrCrayfish/Maven"
        credentials {
            username = project.ext.secretCredentials['GITHUB_USERNAME'] ?: System.getenv("GITHUB_USERNAME")
            password = project.ext.secretCredentials['GITHUB_TOKEN'] ?: System.getenv("GITHUB_TOKEN")
        }
    }
    maven {
        name = 'First Dark Maven'
        url = 'https://maven.firstdark.dev/releases/'
    }
    maven {
        name = 'First Dark Mirror'
        url = 'https://mcentral.firstdark.dev/releases/'
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "CurseMaven"
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    def registrate = "com.tterrag.registrate:Registrate:${registrate_version}"
    jarJar(registrate) {
        jarJar.ranged(it, "[${registrate_version},)")
    }

    implementation fg.deobf(registrate)

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // Catalogue
    // v1.7.0
    runtimeOnly fg.deobf("curse.maven:catalogue-459701:${catalogue_version_id}")

    // Configured
    // v2.1.1
    runtimeOnly fg.deobf("curse.maven:configured-457570:${configured_version_id}")

    // World Stripper
    // v3.2.2
    runtimeOnly fg.deobf("curse.maven:worldstripper-250603:${worldstripper_version_id}")

    // Mekanism
    compileOnly "mekanism:Mekanism:${minecraft_version}-${mekanism_version}:api"

    runtimeOnly fg.deobf("mekanism:Mekanism:${minecraft_version}-${mekanism_version}")
}

reobf {
    jarJar {}
}

tasks.jarJar.configure {
    classifier ''
}

tasks.jarJar.finalizedBy('reobfJarJar')

jar {
    classifier 'slim'
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : project.ext.mod_version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
        ])
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand project.properties
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            from components.java
            jarJar.component(it)
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/KuryKat/Maven"
            credentials {
                username = project.ext.secretCredentials['GITHUB_USERNAME'] ?: System.getenv("GH_USERNAME")
                password = project.ext.secretCredentials['GITHUB_TOKEN'] ?: System.getenv("GH_TOKEN")
            }
        }
        maven {
            name = "FDDMaven"
            def releasesRepoUrl = "${FDDMavenURL}/releases"
            def snapshotsRepoUrl = "${FDDMavenURL}/snapshots"
            url = project.ext.isRelease.toBoolean() ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = project.ext.secretCredentials['FDD_USERNAME'] ?: System.getenv("FDD_USERNAME")
                password = project.ext.secretCredentials['FDD_TOKEN'] ?: System.getenv("FDD_TOKEN")
            }
        }
        maven {
            name = "KuryKatMaven"
            def releasesRepoUrl = "${KuryKatMavenURL}/releases"
            def snapshotsRepoUrl = "${KuryKatMavenURL}/snapshots"
            url = project.ext.isRelease.toBoolean() ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username = project.ext.secretCredentials['MAVEN_USERNAME'] ?: System.getenv("MAVEN_USERNAME")
                password = project.ext.secretCredentials['MAVEN_TOKEN'] ?: System.getenv("MAVEN_TOKEN")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

publisher {
    apiKeys {
        curseforge = project.ext.secretCredentials['CURSEFORGE_TOKEN'] ?: System.getenv("CURSEFORGE_TOKEN")
        modrinth = project.ext.secretCredentials['MODRINTH_TOKEN'] ?: System.getenv("MODRINTH_TOKEN")
        github = project.ext.secretCredentials['GITHUB_TOKEN'] ?: System.getenv("GH_TOKEN")
    }

    debug = false
    curseID = curseforge_id
    modrinthID = modrinth_id
    githubRepo = github_repo
    versionType = mod_release_type
    changelog = "CHANGELOG.md"
    version = project.ext.mod_version
    displayName = mod_name
    gameVersions = [minecraft_version]
    loaders = ["forge"]
    curseEnvironment = "both"
    disableMalwareScanner = false
    disableEmptyJarCheck = true
    useModrinthStaging = false
    artifact = jar
    additionalFiles = [javadocJar, sourcesJar]
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}
